// <auto-generated />
using System;
using System.Collections.Generic;
using Erc.Households.Server.DataAccess.EF;
using Erc.Households.Server.ModelLogs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Erc.Households.Server.DataAccess.EF.Migrations
{
    [DbContext(typeof(ErcContext))]
    partial class ErcContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:citext", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Erc.Households.Server.Domain.AccountingPoints.AccountingPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'10000000', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnName("address_id")
                        .HasColumnType("integer");

                    b.Property<int>("BranchOfficeId")
                        .HasColumnName("branch_office_id")
                        .HasColumnType("integer");

                    b.Property<bool>("ContractIsSigned")
                        .HasColumnName("contract_is_signed")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Debt")
                        .HasColumnName("debt")
                        .HasColumnType("numeric");

                    b.Property<int>("DistributionSystemOperatorId")
                        .HasColumnName("distribution_system_operator_id")
                        .HasColumnType("integer");

                    b.Property<string>("Eic")
                        .IsRequired()
                        .HasColumnName("eic")
                        .HasColumnType("citext")
                        .HasMaxLength(16);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("citext")
                        .HasMaxLength(16);

                    b.Property<int>("OwnerId")
                        .HasColumnName("owner_id")
                        .HasColumnType("integer");

                    b.Property<int>("ZoneRecord")
                        .HasColumnName("zone_record")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_accounting_points");

                    b.HasIndex("AddressId")
                        .HasName("ix_accounting_points_address_id");

                    b.HasIndex("BranchOfficeId")
                        .HasName("ix_accounting_points_branch_office_id");

                    b.HasIndex("DistributionSystemOperatorId")
                        .HasName("ix_accounting_points_distribution_system_operator_id");

                    b.HasIndex("Eic")
                        .IsUnique()
                        .HasName("ix_accounting_points_eic");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_accounting_points_name");

                    b.HasIndex("OwnerId")
                        .HasName("ix_accounting_points_owner_id");

                    b.ToTable("accounting_points");

                    b.HasCheckConstraint("CK_accounting_point_eic", "length(eic) = 16");
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.AccountingPoints.AccountingPointTariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountingPointId")
                        .HasColumnName("accounting_point_id")
                        .HasColumnType("integer");

                    b.Property<IReadOnlyCollection<ObjectLog>>("Logs")
                        .HasColumnName("logs")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TariffId")
                        .HasColumnName("tariff_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_accounting_point_tariff");

                    b.HasIndex("AccountingPointId")
                        .HasName("ix_accounting_point_tariff_accounting_point_id");

                    b.HasIndex("TariffId")
                        .HasName("ix_accounting_point_tariff_tariff_id");

                    b.ToTable("accounting_point_tariffs");
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.AccountingPoints.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountingPointId")
                        .HasColumnName("accounting_point_id")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<IReadOnlyCollection<ObjectLog>>("Logs")
                        .HasColumnName("logs")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_contract");

                    b.HasIndex("AccountingPointId")
                        .HasName("ix_contract_accounting_point_id");

                    b.HasIndex("CustomerId")
                        .HasName("ix_contract_customer_id");

                    b.ToTable("contracts");
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Addresses.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Apt")
                        .HasColumnName("apt")
                        .HasColumnType("citext")
                        .HasMaxLength(5);

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnName("building")
                        .HasColumnType("citext")
                        .HasMaxLength(10);

                    b.Property<int>("StreetId")
                        .HasColumnName("street_id")
                        .HasColumnType("integer");

                    b.Property<string>("Zip")
                        .HasColumnName("zip")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("StreetId")
                        .HasName("ix_addresses_street_id");

                    b.ToTable("addresses");

                    b.HasCheckConstraint("ck_address_zip", "zip ~ '^(\\d){5}$'");
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Addresses.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DistrictId")
                        .HasColumnName("district_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDistrictCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_district_city")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRegionCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_region_city")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("citext")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("DistrictId")
                        .HasName("ix_cities_district_id");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Addresses.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("citext")
                        .HasMaxLength(100);

                    b.Property<int>("RegionId")
                        .HasColumnName("region_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_districts");

                    b.HasIndex("RegionId")
                        .HasName("ix_districts_region_id");

                    b.ToTable("districts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Андрушівський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Баранiвський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Бердичiвський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Брусилівський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Хорошівський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ємільчинський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Житомирський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Коростенський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Коростишiвський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Лугинський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 11,
                            Name = "Любарський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 12,
                            Name = "Малинський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 13,
                            Name = "Народицький район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 14,
                            Name = "Новоград-Волинський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 15,
                            Name = "Овруцький район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 16,
                            Name = "Олевський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 17,
                            Name = "Попільнянський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 18,
                            Name = "Радомишльський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 19,
                            Name = "Романівський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 20,
                            Name = "Ружинський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 21,
                            Name = "Пулинський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 22,
                            Name = "Черняхівський район",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 23,
                            Name = "Чуднівський район",
                            RegionId = 1
                        });
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Addresses.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("citext")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_regions");

                    b.ToTable("regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Житомирська обл."
                        });
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Addresses.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("citext")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_streets");

                    b.HasIndex("CityId")
                        .HasName("ix_streets_city_id");

                    b.ToTable("streets");
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Billing.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountingPointId")
                        .HasColumnName("accounting_point_id")
                        .HasColumnType("integer");

                    b.Property<Guid>("DsoConsumptionId")
                        .HasColumnName("dso_consumption_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("From")
                        .HasColumnName("from")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("text");

                    b.Property<int>("PeriodId")
                        .HasColumnName("period_id")
                        .HasColumnType("integer");

                    b.Property<int>("PresentT1MeterReading")
                        .HasColumnName("present_t1meter_reading")
                        .HasColumnType("integer");

                    b.Property<int>("PresentT2MeterReading")
                        .HasColumnName("present_t2meter_reading")
                        .HasColumnType("integer");

                    b.Property<int>("PresentT3MeterReading")
                        .HasColumnName("present_t3meter_reading")
                        .HasColumnType("integer");

                    b.Property<int>("PreviousT1MeterReading")
                        .HasColumnName("previous_t1meter_reading")
                        .HasColumnType("integer");

                    b.Property<int>("PreviousT2MeterReading")
                        .HasColumnName("previous_t2meter_reading")
                        .HasColumnType("integer");

                    b.Property<int>("PreviousT3MeterReading")
                        .HasColumnName("previous_t3meter_reading")
                        .HasColumnType("integer");

                    b.Property<decimal>("T1Sales")
                        .HasColumnName("t1sales")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("T1Usage")
                        .HasColumnName("t1usage")
                        .HasColumnType("integer");

                    b.Property<decimal>("T2Sales")
                        .HasColumnName("t2sales")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("T2Usage")
                        .HasColumnName("t2usage")
                        .HasColumnType("integer");

                    b.Property<decimal>("T3Sales")
                        .HasColumnName("t3sales")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("T3Usage")
                        .HasColumnName("t3usage")
                        .HasColumnType("integer");

                    b.Property<int>("TariffId")
                        .HasColumnName("tariff_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("To")
                        .HasColumnName("to")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("TotalAmountSales")
                        .HasColumnName("total_amount_sales")
                        .HasColumnType("numeric");

                    b.Property<int>("ZoneRecord")
                        .HasColumnName("zone_record")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_invoice");

                    b.HasIndex("PeriodId")
                        .HasName("ix_invoice_period_id");

                    b.HasIndex("TariffId")
                        .HasName("ix_invoice_tariff_id");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Billing.InvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Consumption")
                        .HasColumnName("consumption")
                        .HasColumnType("integer");

                    b.Property<DateTime>("From")
                        .HasColumnName("from")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InvoiceId")
                        .HasColumnName("invoice_id")
                        .HasColumnType("integer");

                    b.Property<decimal>("Kz")
                        .HasColumnName("kz")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceValue")
                        .HasColumnName("price_value")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Sales")
                        .HasColumnName("sales")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("To")
                        .HasColumnName("to")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ZoneNumber")
                        .HasColumnName("zone_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_invoice_detail");

                    b.HasIndex("InvoiceId")
                        .HasName("ix_invoice_detail_invoice_id");

                    b.ToTable("invoice_detail");
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Billing.InvoicePaymentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric");

                    b.Property<int>("InvoiceId")
                        .HasColumnName("invoice_id")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentId")
                        .HasColumnName("payment_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_invoice_payment_item");

                    b.HasIndex("InvoiceId")
                        .HasName("ix_invoice_payment_item_invoice_id");

                    b.HasIndex("PaymentId")
                        .HasName("ix_invoice_payment_item_payment_id");

                    b.ToTable("invoice_payment_item");
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Billing.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("citext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_period");

                    b.HasIndex("StartDate")
                        .IsUnique()
                        .HasName("ix_periods_start_date");

                    b.ToTable("periods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2019, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Січень 2019р.",
                            StartDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2019, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Лютий 2019р.",
                            StartDate = new DateTime(2019, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2019, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Березень 2019р.",
                            StartDate = new DateTime(2019, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2019, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Квітень 2019р.",
                            StartDate = new DateTime(2019, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2019, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Травень 2019р.",
                            StartDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2019, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Червень 2019р.",
                            StartDate = new DateTime(2019, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            EndDate = new DateTime(2019, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Липень 2019р.",
                            StartDate = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            EndDate = new DateTime(2019, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Серпень 2019р.",
                            StartDate = new DateTime(2019, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            EndDate = new DateTime(2019, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Вересень 2019р.",
                            StartDate = new DateTime(2019, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            EndDate = new DateTime(2019, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Жовтень 2019р.",
                            StartDate = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            EndDate = new DateTime(2019, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Листопад 2019р.",
                            StartDate = new DateTime(2019, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            EndDate = new DateTime(2019, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Грудень 2019р.",
                            StartDate = new DateTime(2019, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            EndDate = new DateTime(2019, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Січень 2019р.",
                            StartDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            EndDate = new DateTime(2019, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Лютий 2019р.",
                            StartDate = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            EndDate = new DateTime(2019, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Березень 2019р.",
                            StartDate = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            EndDate = new DateTime(2019, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Квітень 2019р.",
                            StartDate = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            EndDate = new DateTime(2019, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Травень 2019р.",
                            StartDate = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            EndDate = new DateTime(2019, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Червень 2019р.",
                            StartDate = new DateTime(2020, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Billing.ZoneCoeff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Value")
                        .HasColumnName("value")
                        .HasColumnType("numeric");

                    b.Property<int>("ZoneNumber")
                        .HasColumnName("zone_number")
                        .HasColumnType("integer");

                    b.Property<int>("ZoneRecord")
                        .HasColumnName("zone_record")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_zone_coeffs");

                    b.ToTable("zone_coeffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StartDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1m,
                            ZoneNumber = 1,
                            ZoneRecord = 1
                        },
                        new
                        {
                            Id = 2,
                            StartDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 0.5m,
                            ZoneNumber = 1,
                            ZoneRecord = 2
                        },
                        new
                        {
                            Id = 3,
                            StartDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1m,
                            ZoneNumber = 2,
                            ZoneRecord = 2
                        },
                        new
                        {
                            Id = 4,
                            StartDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 0.4m,
                            ZoneNumber = 1,
                            ZoneRecord = 3
                        },
                        new
                        {
                            Id = 5,
                            StartDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1m,
                            ZoneNumber = 2,
                            ZoneRecord = 3
                        },
                        new
                        {
                            Id = 6,
                            StartDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1.5m,
                            ZoneNumber = 3,
                            ZoneRecord = 3
                        });
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.BranchOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("citext")
                        .HasMaxLength(500);

                    b.Property<int>("CurrentPeriodId")
                        .HasColumnName("current_period_id")
                        .HasColumnType("integer");

                    b.Property<int[]>("DistrictIds")
                        .HasColumnName("district_ids")
                        .HasColumnType("integer[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("citext")
                        .HasMaxLength(200);

                    b.Property<string>("StringId")
                        .IsRequired()
                        .HasColumnName("string_id")
                        .HasColumnType("citext")
                        .HasMaxLength(2);

                    b.HasKey("Id")
                        .HasName("pk_branch_offices");

                    b.HasIndex("CurrentPeriodId")
                        .HasName("ix_branch_offices_current_period_id");

                    b.ToTable("branch_offices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 1 },
                            Name = "Андрушівський ЦОК",
                            StringId = "an"
                        },
                        new
                        {
                            Id = 2,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 2 },
                            Name = "Баранiвський ЦОК",
                            StringId = "bn"
                        },
                        new
                        {
                            Id = 3,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 3 },
                            Name = "Бердичiвський ЦОК",
                            StringId = "bd"
                        },
                        new
                        {
                            Id = 4,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 4 },
                            Name = "Брусилівський ЦОК",
                            StringId = "br"
                        },
                        new
                        {
                            Id = 5,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 5 },
                            Name = "Хорошівський ЦОК",
                            StringId = "hr"
                        },
                        new
                        {
                            Id = 6,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 6 },
                            Name = "Ємільчинський ЦОК",
                            StringId = "em"
                        },
                        new
                        {
                            Id = 7,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 7 },
                            Name = "Житомирський ЦОК",
                            StringId = "zt"
                        },
                        new
                        {
                            Id = 8,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 7 },
                            Name = "Зарічанський ЦОК",
                            StringId = "zr"
                        },
                        new
                        {
                            Id = 9,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 8, 10 },
                            Name = "Коростенський ЦОК",
                            StringId = "kr"
                        },
                        new
                        {
                            Id = 10,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 9 },
                            Name = "Коростишiвський ЦОК",
                            StringId = "kt"
                        },
                        new
                        {
                            Id = 11,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 11 },
                            Name = "Любарський ЦОК",
                            StringId = "lb"
                        },
                        new
                        {
                            Id = 12,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 12 },
                            Name = "Малинський ЦОК",
                            StringId = "ml"
                        },
                        new
                        {
                            Id = 13,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 13 },
                            Name = "Народицький ЦОК",
                            StringId = "nr"
                        },
                        new
                        {
                            Id = 14,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 14 },
                            Name = "Новоград-Волинський ЦОК",
                            StringId = "nv"
                        },
                        new
                        {
                            Id = 15,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 15 },
                            Name = "Овруцький ЦОК",
                            StringId = "ov"
                        },
                        new
                        {
                            Id = 16,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 16 },
                            Name = "Олевський ЦОК",
                            StringId = "ol"
                        },
                        new
                        {
                            Id = 17,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 17, 20 },
                            Name = "Попільнянський ЦОК",
                            StringId = "pp"
                        },
                        new
                        {
                            Id = 18,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 18 },
                            Name = "Радомишльський ЦОК",
                            StringId = "rd"
                        },
                        new
                        {
                            Id = 19,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 19 },
                            Name = "Романівський ЦОК",
                            StringId = "rm"
                        },
                        new
                        {
                            Id = 20,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 21 },
                            Name = "Пулинський ЦОК",
                            StringId = "pl"
                        },
                        new
                        {
                            Id = 21,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 22 },
                            Name = "Черняхівський ЦОК",
                            StringId = "ch"
                        },
                        new
                        {
                            Id = 22,
                            Address = "10003, м. Житомир, майдан Перемоги, 10",
                            CurrentPeriodId = 1,
                            DistrictIds = new[] { 23 },
                            Name = "Чуднівський ЦОК",
                            StringId = "cd"
                        });
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.DistributionSystemOperator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id")
                        .HasName("pk_distribution_system_operators");

                    b.ToTable("distribution_system_operators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "АТ «Житомиробленерго»"
                        },
                        new
                        {
                            Id = 2,
                            Name = "АТ «Укрзалізниця»"
                        });
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Payments.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AccountingPointId")
                        .HasColumnName("accounting_point_id")
                        .HasColumnType("integer");

                    b.Property<string>("AccountingPointName")
                        .HasColumnName("accounting_point_name")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric");

                    b.Property<int>("BatchId")
                        .HasColumnName("batch_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EnterDate")
                        .HasColumnName("enter_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PayDate")
                        .HasColumnName("pay_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PayerInfo")
                        .HasColumnName("payer_info")
                        .HasColumnType("text");

                    b.Property<int?>("PaymentBatchId")
                        .HasColumnName("payment_batch_id")
                        .HasColumnType("integer");

                    b.Property<int>("PeriodId")
                        .HasColumnName("period_id")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_payment");

                    b.HasIndex("AccountingPointId")
                        .HasName("ix_payment_accounting_point_id");

                    b.HasIndex("PaymentBatchId")
                        .HasName("ix_payment_payment_batch_id");

                    b.HasIndex("PeriodId")
                        .HasName("ix_payment_period_id");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Payments.PaymentBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ChannelId")
                        .HasColumnName("channel_id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsClosed")
                        .HasColumnName("is_closed")
                        .HasColumnType("boolean");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnName("total_amount")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalCount")
                        .HasColumnName("total_count")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_payment_batches");

                    b.ToTable("payment_batches");
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Payments.PaymentChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DateFieldName")
                        .HasColumnName("date_field_name")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("citext");

                    b.Property<string>("PersonFieldName")
                        .HasColumnName("person_field_name")
                        .HasColumnType("text");

                    b.Property<string>("RecordpointFieldName")
                        .HasColumnName("recordpoint_field_name")
                        .HasColumnType("text");

                    b.Property<string>("SumFieldName")
                        .HasColumnName("sum_field_name")
                        .HasColumnType("text");

                    b.Property<string>("TextDateFormat")
                        .HasColumnName("text_date_format")
                        .HasColumnType("text");

                    b.Property<int>("TotalRecord")
                        .HasColumnName("total_record")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_payment_channels");

                    b.ToTable("payment_channels");
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnName("address_id")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("citext")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("IdCardExpDate")
                        .HasColumnName("id_card_exp_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("IdCardIssuanceDate")
                        .HasColumnName("id_card_issuance_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IdCardNumber")
                        .IsRequired()
                        .HasColumnName("id_card_number")
                        .HasColumnType("citext")
                        .HasMaxLength(9);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("citext")
                        .HasMaxLength(50);

                    b.Property<string[]>("MobilePhones")
                        .HasColumnName("mobile_phones")
                        .HasColumnType("varchar(15)[]");

                    b.Property<string>("Patronymic")
                        .HasColumnName("patronymic")
                        .HasColumnType("citext")
                        .HasMaxLength(50);

                    b.Property<string>("TaxCode")
                        .HasColumnName("tax_code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id")
                        .HasName("pk_people");

                    b.HasIndex("AddressId")
                        .HasName("ix_people_address_id");

                    b.HasIndex("IdCardNumber")
                        .IsUnique()
                        .HasName("ix_people_id_card_number");

                    b.HasIndex("TaxCode")
                        .IsUnique()
                        .HasName("ix_people_tax_code");

                    b.ToTable("people");
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Tariffs.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("citext")
                        .HasMaxLength(200);

                    b.HasKey("Id")
                        .HasName("pk_tariffs");

                    b.ToTable("tariffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Населення (загальний тариф)"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Будинки з електроопалювальними установками"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Багатоквартирні негазифіковані будинки"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Багатодітні, прийомні сім'ї та дитячі будинки сімейного типу"
                        });
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Tariffs.TariffRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ConsumptionLimit")
                        .HasColumnName("consumption_limit")
                        .HasColumnType("integer");

                    b.Property<int?>("HeatingConsumptionLimit")
                        .HasColumnName("heating_consumption_limit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("HeatingEndDay")
                        .HasColumnName("heating_end_day")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("HeatingStartDay")
                        .HasColumnName("heating_start_day")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TariffId")
                        .HasColumnName("tariff_id")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnName("value")
                        .HasColumnType("decimal(8,5)");

                    b.HasKey("Id")
                        .HasName("pk_tariff_rate");

                    b.HasIndex("TariffId")
                        .HasName("ix_tariff_rate_tariff_id");

                    b.ToTable("tariff_rates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsumptionLimit = 100,
                            StartDate = new DateTime(2017, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TariffId = 1,
                            Value = 0.9m
                        },
                        new
                        {
                            Id = 2,
                            StartDate = new DateTime(2017, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TariffId = 1,
                            Value = 1.68m
                        },
                        new
                        {
                            Id = 3,
                            ConsumptionLimit = 100,
                            HeatingConsumptionLimit = 3000,
                            HeatingEndDay = new DateTime(2020, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeatingStartDay = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2017, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TariffId = 2,
                            Value = 0.90m
                        },
                        new
                        {
                            Id = 4,
                            StartDate = new DateTime(2017, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TariffId = 2,
                            Value = 1.68m
                        },
                        new
                        {
                            Id = 5,
                            ConsumptionLimit = 100,
                            HeatingConsumptionLimit = 3000,
                            HeatingEndDay = new DateTime(2020, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeatingStartDay = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2017, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TariffId = 3,
                            Value = 0.90m
                        },
                        new
                        {
                            Id = 6,
                            StartDate = new DateTime(2017, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TariffId = 3,
                            Value = 1.68m
                        },
                        new
                        {
                            Id = 7,
                            StartDate = new DateTime(2017, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TariffId = 4,
                            Value = 0.90m
                        });
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.AccountingPoints.AccountingPoint", b =>
                {
                    b.HasOne("Erc.Households.Server.Domain.Addresses.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_accounting_points_addresses_address_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erc.Households.Server.Domain.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId")
                        .HasConstraintName("fk_accounting_points_branch_offices_branch_office_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erc.Households.Server.Domain.DistributionSystemOperator", "DistributionSystemOperator")
                        .WithMany()
                        .HasForeignKey("DistributionSystemOperatorId")
                        .HasConstraintName("fk_accounting_points_distribution_system_operators_distributio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erc.Households.Server.Domain.Person", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_accounting_points_people_owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.AccountingPoints.AccountingPointTariff", b =>
                {
                    b.HasOne("Erc.Households.Server.Domain.AccountingPoints.AccountingPoint", null)
                        .WithMany("TariffsHistory")
                        .HasForeignKey("AccountingPointId")
                        .HasConstraintName("fk_accounting_point_tariff_accounting_points_accounting_point_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erc.Households.Server.Domain.Tariffs.Tariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .HasConstraintName("fk_accounting_point_tariff_tariffs_tariff_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.AccountingPoints.Contract", b =>
                {
                    b.HasOne("Erc.Households.Server.Domain.AccountingPoints.AccountingPoint", null)
                        .WithMany("ContractsHistory")
                        .HasForeignKey("AccountingPointId")
                        .HasConstraintName("fk_contract_accounting_points_accounting_point_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erc.Households.Server.Domain.Person", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_contract_people_customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Addresses.Address", b =>
                {
                    b.HasOne("Erc.Households.Server.Domain.Addresses.Street", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId")
                        .HasConstraintName("fk_addresses_streets_street_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Addresses.City", b =>
                {
                    b.HasOne("Erc.Households.Server.Domain.Addresses.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_cities_districts_district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Addresses.District", b =>
                {
                    b.HasOne("Erc.Households.Server.Domain.Addresses.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .HasConstraintName("fk_districts_regions_region_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Addresses.Street", b =>
                {
                    b.HasOne("Erc.Households.Server.Domain.Addresses.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_streets_cities_city_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Billing.Invoice", b =>
                {
                    b.HasOne("Erc.Households.Server.Domain.Billing.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .HasConstraintName("fk_invoice_period_period_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erc.Households.Server.Domain.Tariffs.Tariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .HasConstraintName("fk_invoice_tariffs_tariff_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Billing.InvoiceDetail", b =>
                {
                    b.HasOne("Erc.Households.Server.Domain.Billing.Invoice", null)
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("fk_invoice_detail_invoice_invoice_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Billing.InvoicePaymentItem", b =>
                {
                    b.HasOne("Erc.Households.Server.Domain.Billing.Invoice", "Invoice")
                        .WithMany("InvoicePaymentItems")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("fk_invoice_payment_item_invoice_invoice_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erc.Households.Server.Domain.Payments.Payment", "Payment")
                        .WithMany("InvoicePaymentItems")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_invoice_payment_item_payment_payment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.BranchOffice", b =>
                {
                    b.HasOne("Erc.Households.Server.Domain.Billing.Period", "CurrentPeriod")
                        .WithMany()
                        .HasForeignKey("CurrentPeriodId")
                        .HasConstraintName("fk_branch_offices_period_current_period_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Payments.Payment", b =>
                {
                    b.HasOne("Erc.Households.Server.Domain.AccountingPoints.AccountingPoint", "AccountingPoint")
                        .WithMany()
                        .HasForeignKey("AccountingPointId")
                        .HasConstraintName("fk_payment_accounting_points_accounting_point_id");

                    b.HasOne("Erc.Households.Server.Domain.Payments.PaymentBatch", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaymentBatchId")
                        .HasConstraintName("fk_payment_payment_batches_payment_batch_id");

                    b.HasOne("Erc.Households.Server.Domain.Billing.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .HasConstraintName("fk_payment_period_period_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Person", b =>
                {
                    b.HasOne("Erc.Households.Server.Domain.Addresses.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_people_addresses_address_id");
                });

            modelBuilder.Entity("Erc.Households.Server.Domain.Tariffs.TariffRate", b =>
                {
                    b.HasOne("Erc.Households.Server.Domain.Tariffs.Tariff", null)
                        .WithMany("Rates")
                        .HasForeignKey("TariffId")
                        .HasConstraintName("fk_tariff_rate_tariffs_tariff_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
